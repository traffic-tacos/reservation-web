import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useMutation } from '@tanstack/react-query'
import { motion } from 'framer-motion'
import { Clock } from 'lucide-react'
import { reservationApi } from '@/api/reservation'

function Reserve() {
  const navigate = useNavigate()
  const [quantity, setQuantity] = useState(1)
  const [selectedSeats, setSelectedSeats] = useState<string[]>([])
  const [holdTimeLeft, setHoldTimeLeft] = useState(180) // 3Î∂Ñ = 180Ï¥à
  const [selectedFloor, setSelectedFloor] = useState<'1F' | '2F' | '3F' | '4F' | '5F' | '6F' | '7F' | '8F' | '9F'>('1F')
  const [zoomLevel, setZoomLevel] = useState(1) // ÌôïÎåÄ/Ï∂ïÏÜå Î†àÎ≤®

  // üîë SessionStorageÏóêÏÑú reservation_token Î∞è ÎßåÎ£å ÏãúÍ∞Ñ Í≤ÄÏ¶ù
  const [reservationToken] = useState(() => {
    const savedToken = sessionStorage.getItem('reservation_token')
    const expiresAtStr = sessionStorage.getItem('reservation_expires_at')

    if (!savedToken || !expiresAtStr) {
      console.warn('‚ö†Ô∏è [RESERVE] No reservation token found in sessionStorage')
      return ''
    }

    const expiresAt = parseInt(expiresAtStr)
    const now = Date.now()

    if (now >= expiresAt) {
      // ‚ùå ÎßåÎ£åÎê® - Ï≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú ÏãúÏûë
      console.log('‚ö†Ô∏è [RESERVE] Reservation token expired, redirecting to home')
      console.log('‚è∞ [RESERVE] Expired at:', new Date(expiresAt).toISOString())
      console.log('‚è∞ [RESERVE] Current time:', new Date(now).toISOString())
      
      sessionStorage.clear()
      alert('ÏòàÏïΩ ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Ï≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî.')
      navigate('/')
      return ''
    }

    // ‚úÖ ÏïÑÏßÅ Ïú†Ìö®Ìï®! Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
    const remainingSeconds = Math.floor((expiresAt - now) / 1000)
    console.log('‚úÖ [RESERVE] Reservation token still valid:', savedToken)
    console.log('‚úÖ [RESERVE] Remaining time:', remainingSeconds, 'seconds')
    
    return savedToken
  })

  // 3Î∂Ñ Ïπ¥Ïö¥Ìä∏Îã§Ïö¥ ÌÉÄÏù¥Î®∏
  useEffect(() => {
    if (holdTimeLeft <= 0) {
      alert('ÏòàÏïΩ ÏãúÍ∞ÑÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Ï≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî.')
      navigate('/')
      return
    }

    const timer = setInterval(() => {
      setHoldTimeLeft(prev => {
        if (prev <= 1) {
          clearInterval(timer)
          return 0
        }
        return prev - 1
      })
    }, 1000)

    return () => clearInterval(timer)
  }, [holdTimeLeft, navigate])

  // ÏòàÏïΩ ÏÉùÏÑ± ÎÆ§ÌÖåÏù¥ÏÖò
  const createReservationMutation = useMutation({
    mutationFn: (data: { event_id: string; seat_ids: string[]; quantity: number }) => {
      console.log('üöÄ [RESERVATION] mutationFn called with:', data)
      console.log('üîë [RESERVATION] Using reservationToken:', reservationToken)
      
      const payload = {
        ...data,
        reservation_token: reservationToken || `rtkn_fallback_${Date.now()}`,
        user_id: 'user_' + Date.now(), // ÏûÑÏãú user_id
      }
      
      console.log('üì§ [RESERVATION] Final payload:', payload)
      return reservationApi.create(payload)
    },
    onSuccess: (response) => {
      console.log('‚úÖ [RESERVATION] Create success:', response)
      
      // ÏòàÏïΩ ID Í≤ÄÏ¶ù
      if (!response.reservation_id || response.reservation_id === '') {
        console.error('‚ùå [RESERVATION] Empty reservation_id received from backend')
        console.error('‚ùå [RESERVATION] Full response:', JSON.stringify(response, null, 2))
        alert('ÏòàÏïΩ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. (reservation_idÍ∞Ä ÎπÑÏñ¥ÏûàÏùå)\n\nÎ∞±ÏóîÎìú ÌåÄÏóê Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî.')
        return
      }
      
      // ÏòàÏïΩ ID Ï†ÄÏû•
      localStorage.setItem('reservation_id', response.reservation_id)
      localStorage.setItem('hold_expires_at', response.hold_expires_at)
      navigate('/payment')
    },
    onError: (error) => {
      console.error('‚ùå [RESERVATION] Create failed:', error)
      console.error('‚ùå [RESERVATION] Error details:', JSON.stringify(error, null, 2))
      console.error('‚ùå [RESERVATION] Error message:', (error as Error).message)
      console.error('‚ùå [RESERVATION] Error stack:', (error as Error).stack)
      alert('ÏòàÏïΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.')
    },
  })

  // ÏòàÏïΩÌïòÍ∏∞ Ìï∏Îì§Îü¨
  const handleReserve = async () => {
    console.log('üé´ [RESERVATION] Reserve button clicked')
    console.log('üé´ [RESERVATION] Selected seats:', selectedSeats)
    console.log('üé´ [RESERVATION] Quantity:', quantity)

    // JWT ÌÜ†ÌÅ∞ ÌôïÏù∏ (Í≤åÏä§Ìä∏ ÌÜ†ÌÅ∞ Ï†úÏô∏)
    const authToken = localStorage.getItem('auth_token')
    if (!authToken) {
      console.warn('‚ö†Ô∏è [RESERVATION] No JWT token found - redirecting to login')
      
      // Î°úÍ∑∏Ïù∏ ÌõÑ ÎèåÏïÑÏò¨ Í≤ΩÎ°ú Ï†ÄÏû• (ÏòàÏïΩ ÌéòÏù¥ÏßÄ)
      localStorage.setItem('redirect_after_login', '/reserve')
      
      alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌïú ÏÑúÎπÑÏä§ÏûÖÎãàÎã§.')
      navigate('/login')
      return
    }

    if (selectedSeats.length !== quantity) {
      alert(`${quantity}Í∞úÏùò Ï¢åÏÑùÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.`)
      return
    }

    const eventId = localStorage.getItem('selected_event_id') || 'evt_2025_1001'
    
    console.log('üì° [RESERVATION] Calling mutation with:', {
      event_id: eventId,
      seat_ids: selectedSeats,
      quantity
    })

    try {
      await createReservationMutation.mutateAsync({
        event_id: eventId,
        seat_ids: selectedSeats,
        quantity
      })
      console.log('‚úÖ [RESERVATION] Mutation completed successfully')
    } catch (error) {
      console.error('‚ùå [RESERVATION] Mutation error:', error)
    }
  }

  // üö™ Î∏åÎùºÏö∞Ï†Ä Îã´Í∏∞/ÏÉàÎ°úÍ≥†Ïπ® Ïãú ÏòàÏïΩ ÌÜ†ÌÅ∞ ÎßåÎ£å Ï≤òÎ¶¨
  useEffect(() => {
    if (!reservationToken) return

    const handleBeforeUnload = () => {
      console.log('üö™ [RESERVE] Browser closing/refreshing - clearing sessionStorage')
      
      // SessionStorageÎäî Î∏åÎùºÏö∞Ï†Ä Îã´ÏúºÎ©¥ ÏûêÎèôÏúºÎ°ú ÏÇ≠Ï†úÎêòÏßÄÎßå Î™ÖÏãúÏ†ÅÏúºÎ°ú Ï†ïÎ¶¨
      sessionStorage.removeItem('reservation_token')
      sessionStorage.removeItem('reservation_expires_at')
      
      // TODO: Î∞±ÏóîÎìúÏóê ÏòàÏïΩ Ï∑®ÏÜå API Ï∂îÍ∞Ä Ïãú Íµ¨ÌòÑ
      // const apiBase = import.meta.env.VITE_API_BASE_URL || 'https://api.traffictacos.store'
      // const url = `${apiBase}/api/v1/queue/cancel-reservation?token=${encodeURIComponent(reservationToken)}`
      // navigator.sendBeacon(url)
    }

    window.addEventListener('beforeunload', handleBeforeUnload)
    
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload)
    }
  }, [reservationToken])

  // Ï¢åÏÑù ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleSeatClick = (seatId: string) => {
    if (selectedSeats.includes(seatId)) {
      setSelectedSeats(prev => prev.filter(s => s !== seatId))
    } else if (selectedSeats.length < quantity) {
      setSelectedSeats(prev => [...prev, seatId])
    }
  }

  // Ï¢åÏÑù Ïª®ÌÖåÏù¥ÎÑà ÌÅ¨Í∏∞ Í≥ÑÏÇ∞ Î∞è Ï¥àÍ∏∞ Ï§å ÏÑ§Ï†ï
  useEffect(() => {
    const calculateInitialZoom = () => {
      const container = document.getElementById('seat-container')
      const grid = document.getElementById('seat-grid')
      
      if (container && grid) {
        const containerWidth = container.clientWidth - 48 // padding Ï†úÏô∏
        const gridWidth = grid.scrollWidth
        
        if (gridWidth > 0) {
          // Í∑∏Î¶¨ÎìúÍ∞Ä Ïª®ÌÖåÏù¥ÎÑàÎ≥¥Îã§ ÌÅ¥ Í≤ΩÏö∞ ÎßûÏ∂§ Ï§å Í≥ÑÏÇ∞
          const calculatedZoom = Math.min(1, (containerWidth / gridWidth) * 0.95) // 95%Î°ú Ïó¨Ïú† Í≥µÍ∞Ñ ÌôïÎ≥¥
          const finalZoom = Math.max(0.3, calculatedZoom) // ÏµúÏÜå 0.3x
          
          // Ï∏µ Î≥ÄÍ≤Ω ÏãúÎßàÎã§ Ï§å Ïû¨ÏÑ§Ï†ï
          setZoomLevel(finalZoom)
        }
      }
    }

    // ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ ÌõÑ Í≥ÑÏÇ∞ (Î†åÎçîÎßÅ ÏôÑÎ£å ÎåÄÍ∏∞)
    const timer = setTimeout(calculateInitialZoom, 150)
    return () => clearTimeout(timer)
  }, [selectedFloor]) // initialZoom ÏùòÏ°¥ÏÑ± Ï†úÍ±∞ÌïòÏó¨ Îß§Î≤à Ïû¨Í≥ÑÏÇ∞

  // ÎßàÏö∞Ïä§ Ìú† Ï§å Ìï∏Îì§Îü¨ (Ï∏µ Î≥ÄÍ≤Ω ÏãúÏóêÎèÑ Ïû¨Îì±Î°ù)
  useEffect(() => {
    const handleWheel = (e: WheelEvent) => {
      if (e.ctrlKey || e.metaKey) {
        e.preventDefault()
        setZoomLevel(prev => {
          const delta = e.deltaY > 0 ? -0.1 : 0.1
          const newZoom = prev + delta
          return Math.max(0.3, Math.min(3, newZoom)) // 0.3x ~ 3x
        })
      }
    }

    // ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ ÌõÑ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù (DOM Ï§ÄÎπÑ ÎåÄÍ∏∞)
    const timer = setTimeout(() => {
      const container = document.getElementById('seat-container')
      if (container) {
        container.addEventListener('wheel', handleWheel, { passive: false })
      }
    }, 100)

    return () => {
      clearTimeout(timer)
      const container = document.getElementById('seat-container')
      if (container) {
        container.removeEventListener('wheel', handleWheel)
      }
    }
  }, [selectedFloor]) // selectedFloor Î≥ÄÍ≤Ω Ïãú Ïû¨Îì±Î°ù

  // Ï∏µÎ≥Ñ Ï¢åÏÑù Î∞∞Ïπò ÏÉùÏÑ± (9Ï∏µ, Îèî ÌòïÌÉú: Ï§ëÏïô Í≥†Ï†ï + ÏñëÏòÜ Ï¶ùÍ∞Ä)
  // Ï¥ù 10,000ÏÑù Î™©Ìëú: Í∞Å Ï∏µÎ≥Ñ Ï¢åÏÑù Ïàò Í≥ÑÏÇ∞Îê®
  const generateFloorSeats = (floor: '1F' | '2F' | '3F' | '4F' | '5F' | '6F' | '7F' | '8F' | '9F') => {
    const floorConfig = {
      '1F': { name: 'VIPÏÑù', color: 'purple', rows: 15, centerSeats: 10, prefix: 'VIP', aisleRows: [5, 6, 10, 11] },
      '2F': { name: 'RÏÑù', color: 'blue', rows: 16, centerSeats: 10, prefix: 'R', aisleRows: [5, 6, 11, 12] },
      '3F': { name: 'SÏÑù', color: 'green', rows: 17, centerSeats: 10, prefix: 'S', aisleRows: [6, 7, 11, 12] },
      '4F': { name: 'AÏÑù', color: 'orange', rows: 18, centerSeats: 10, prefix: 'A', aisleRows: [6, 7, 12, 13] },
      '5F': { name: 'BÏÑù', color: 'red', rows: 19, centerSeats: 10, prefix: 'B', aisleRows: [6, 7, 13, 14] },
      '6F': { name: 'CÏÑù', color: 'gray', rows: 20, centerSeats: 10, prefix: 'C', aisleRows: [7, 8, 13, 14] },
      '7F': { name: 'DÏÑù', color: 'indigo', rows: 21, centerSeats: 10, prefix: 'D', aisleRows: [7, 8, 14, 15] },
      '8F': { name: 'EÏÑù', color: 'pink', rows: 22, centerSeats: 10, prefix: 'E', aisleRows: [7, 8, 15, 16] },
      '9F': { name: 'FÏÑù', color: 'teal', rows: 23, centerSeats: 10, prefix: 'F', aisleRows: [8, 9, 15, 16] },
    }

    const config = floorConfig[floor]
    const seats = []

    for (let row = 1; row <= config.rows; row++) {
      // Îèî ÌòïÌÉú: Ï§ëÏïôÏùÄ Í≥†Ï†ï, ÏñëÏòÜÏúºÎ°ú Ï¶ùÍ∞Ä
      // ÏïûÏ™Ω(1Ìñâ)ÏùÄ ÏñëÏòÜÏù¥ Ï¢ÅÍ≥†, Îí§Ï™Ω(ÎßàÏßÄÎßâ Ìñâ)ÏùÄ ÏñëÏòÜÏù¥ ÎÑìÏùå
      const sideIncrease = Math.floor((row / config.rows) * 10) // 0 ~ 10 Ï¶ùÍ∞Ä
      const totalSeats = config.centerSeats + (sideIncrease * 2) // ÏñëÏ™ΩÏóê ÎèôÏùºÌïòÍ≤å Ï¶ùÍ∞Ä
      
      // ÌÜµÎ°ú Ïó¨Î∂Ä ÌôïÏù∏
      const isAisle = config.aisleRows.includes(row)
      
      seats.push({
        row,
        count: totalSeats,
        centerSeats: config.centerSeats,
        sideSeats: sideIncrease,
        config,
        isAisle
      })
    }

    return seats
  }

  const currentFloorSeats = generateFloorSeats(selectedFloor)
  const floorConfig = {
    '1F': { name: 'VIPÏÑù', color: 'purple', emoji: 'üíé', gradient: 'from-purple-500 to-purple-700' },
    '2F': { name: 'RÏÑù', color: 'blue', emoji: 'üé´', gradient: 'from-blue-500 to-blue-700' },
    '3F': { name: 'SÏÑù', color: 'green', emoji: 'üéüÔ∏è', gradient: 'from-green-500 to-green-700' },
    '4F': { name: 'AÏÑù', color: 'orange', emoji: 'üé™', gradient: 'from-orange-500 to-orange-700' },
    '5F': { name: 'BÏÑù', color: 'red', emoji: 'üé≠', gradient: 'from-red-500 to-red-700' },
    '6F': { name: 'CÏÑù', color: 'gray', emoji: 'üé¨', gradient: 'from-gray-500 to-gray-700' },
    '7F': { name: 'DÏÑù', color: 'indigo', emoji: 'üé®', gradient: 'from-indigo-500 to-indigo-700' },
    '8F': { name: 'EÏÑù', color: 'pink', emoji: 'üéÄ', gradient: 'from-pink-500 to-pink-700' },
    '9F': { name: 'FÏÑù', color: 'teal', emoji: 'üéØ', gradient: 'from-teal-500 to-teal-700' },
  }[selectedFloor]

  return (
    <div className="max-w-6xl mx-auto px-4">
      {/* ÏÉÅÎã® Ï†ïÎ≥¥ Ìå®ÎÑê */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="card mb-6"
      >
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 mb-1">
              Ï¢åÏÑù ÏÑ†ÌÉù Î∞è ÏòàÏïΩ
            </h1>
            <p className="text-sm text-gray-600">
              Ï¥ù 10,000ÏÑù | ÏÑ†ÌÉù: {selectedSeats.length}/{quantity}
            </p>
          </div>
          
          {/* ÌôÄÎìú ÌÉÄÏù¥Î®∏ (3Î∂Ñ Ïπ¥Ïö¥Ìä∏Îã§Ïö¥) */}
          <div className={`border rounded-xl px-4 py-2 ${
            holdTimeLeft <= 30 
              ? 'bg-red-50 border-red-300' 
              : holdTimeLeft <= 60 
              ? 'bg-orange-50 border-orange-300' 
              : 'bg-yellow-50 border-yellow-200'
          }`}>
            <div className={`flex items-center space-x-2 ${
              holdTimeLeft <= 30 
                ? 'text-red-800' 
                : holdTimeLeft <= 60 
                ? 'text-orange-800' 
                : 'text-yellow-800'
            }`}>
              <Clock size={18} className={holdTimeLeft <= 30 ? 'animate-pulse' : ''} />
              <div className="text-right">
                <div className="font-bold text-lg">
                  {Math.floor(holdTimeLeft / 60)}:{(holdTimeLeft % 60).toString().padStart(2, '0')}
                </div>
                <div className="text-xs opacity-80">ÎÇ®ÏùÄ ÏãúÍ∞Ñ</div>
              </div>
            </div>
          </div>
        </div>

        {/* ÏàòÎüâ ÏÑ†ÌÉù */}
        <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4">
          <label className="text-sm font-medium text-gray-700 whitespace-nowrap">ÏàòÎüâ:</label>
          <select
            value={quantity}
            onChange={(e) => {
              setQuantity(Number(e.target.value))
              setSelectedSeats([])
            }}
            className="input py-2 px-3 text-sm min-w-[100px]"
          >
            {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(num => (
              <option key={num} value={num}>{num}Îß§</option>
            ))}
          </select>
        </div>
      </motion.div>

      {/* Ï∏µ ÏÑ†ÌÉù ÌÉ≠ */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="card mb-6"
      >
        <div className="grid grid-cols-3 gap-2">
          {(['1F', '2F', '3F', '4F', '5F', '6F', '7F', '8F', '9F'] as const).map((floor) => {
            const config = {
              '1F': { name: 'VIPÏÑù', emoji: 'üíé', color: 'purple', prefix: 'VIP' },
              '2F': { name: 'RÏÑù', emoji: 'üé´', color: 'blue', prefix: 'R' },
              '3F': { name: 'SÏÑù', emoji: 'üéüÔ∏è', color: 'green', prefix: 'S' },
              '4F': { name: 'AÏÑù', emoji: 'üé™', color: 'orange', prefix: 'A' },
              '5F': { name: 'BÏÑù', emoji: 'üé≠', color: 'red', prefix: 'B' },
              '6F': { name: 'CÏÑù', emoji: 'üé¨', color: 'gray', prefix: 'C' },
              '7F': { name: 'DÏÑù', emoji: 'üé®', color: 'indigo', prefix: 'D' },
              '8F': { name: 'EÏÑù', emoji: 'üéÄ', color: 'pink', prefix: 'E' },
              '9F': { name: 'FÏÑù', emoji: 'üéØ', color: 'teal', prefix: 'F' },
            }[floor]

            // Ìï¥Îãπ Ï∏µÏóêÏÑú ÏÑ†ÌÉùÎêú Ï¢åÏÑù Í∞úÏàò Í≥ÑÏÇ∞
            const seatsInFloor = selectedSeats.filter(seat => seat.startsWith(config.prefix)).length

            const isActive = selectedFloor === floor
            const colorClasses = {
              purple: isActive ? 'bg-purple-500 text-white shadow-lg' : 'bg-gray-100 text-gray-700 hover:bg-purple-100',
              blue: isActive ? 'bg-blue-500 text-white shadow-lg' : 'bg-gray-100 text-gray-700 hover:bg-blue-100',
              green: isActive ? 'bg-green-500 text-white shadow-lg' : 'bg-gray-100 text-gray-700 hover:bg-green-100',
              orange: isActive ? 'bg-orange-500 text-white shadow-lg' : 'bg-gray-100 text-gray-700 hover:bg-orange-100',
              red: isActive ? 'bg-red-500 text-white shadow-lg' : 'bg-gray-100 text-gray-700 hover:bg-red-100',
              gray: isActive ? 'bg-gray-600 text-white shadow-lg' : 'bg-gray-100 text-gray-700 hover:bg-gray-200',
              indigo: isActive ? 'bg-indigo-500 text-white shadow-lg' : 'bg-gray-100 text-gray-700 hover:bg-indigo-100',
              pink: isActive ? 'bg-pink-500 text-white shadow-lg' : 'bg-gray-100 text-gray-700 hover:bg-pink-100',
              teal: isActive ? 'bg-teal-500 text-white shadow-lg' : 'bg-gray-100 text-gray-700 hover:bg-teal-100',
            }[config.color]

            return (
              <button
                key={floor}
                onClick={() => setSelectedFloor(floor)}
                className={`relative py-3 px-4 rounded-xl font-medium transition-all ${colorClasses}`}
              >
                <div className="flex items-center justify-center space-x-2">
                  <span className="text-xl">{config.emoji}</span>
                  <div className="text-left">
                    <div className="text-sm font-bold">{floor}</div>
                    <div className="text-xs opacity-80">{config.name}</div>
                  </div>
                </div>
                {/* ÏÑ†ÌÉùÎêú Ï¢åÏÑù Í∞úÏàò Î∞∞ÏßÄ */}
                {seatsInFloor > 0 && (
                  <div className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center text-xs font-bold shadow-lg">
                    {seatsInFloor}
                  </div>
                )}
              </button>
            )
          })}
        </div>
      </motion.div>

      {/* Ï¢åÏÑù Î∞∞ÏπòÎèÑ (Îèî ÌòïÏãù) */}
      <motion.div
        key={selectedFloor}
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.3 }}
        className="card"
      >
        {/* Ïä§ÌÖåÏù¥ÏßÄ */}
        <div className="mb-8">
          <div className="relative">
            {/* Ïä§ÌÖåÏù¥ÏßÄ Î∞∞Í≤Ω */}
            <div className={`bg-gradient-to-r ${floorConfig.gradient} text-white rounded-3xl shadow-2xl overflow-hidden`}>
              {/* Ïä§ÌÖåÏù¥ÏßÄ Ïû•ÎπÑ Î∞è Ï°∞Î™Ö */}
              <div className="relative h-32 flex items-center justify-center">
                {/* Ï°∞Î™Ö Ìä∏Îü¨Ïä§ */}
                <div className="absolute top-0 left-0 right-0 h-2 bg-gray-800"></div>
                <div className="absolute top-2 left-10 w-3 h-3 bg-yellow-400 rounded-full animate-pulse"></div>
                <div className="absolute top-2 left-1/4 w-3 h-3 bg-blue-400 rounded-full animate-pulse" style={{ animationDelay: '0.3s' }}></div>
                <div className="absolute top-2 left-1/2 w-3 h-3 bg-red-400 rounded-full animate-pulse" style={{ animationDelay: '0.6s' }}></div>
                <div className="absolute top-2 left-3/4 w-3 h-3 bg-green-400 rounded-full animate-pulse" style={{ animationDelay: '0.9s' }}></div>
                <div className="absolute top-2 right-10 w-3 h-3 bg-purple-400 rounded-full animate-pulse" style={{ animationDelay: '1.2s' }}></div>
                
                {/* Î©îÏù∏ Ïä§ÌÖåÏù¥ÏßÄ */}
                <div className="z-10 text-center">
                  <p className="text-3xl font-bold mb-2">üé§ STAGE üé§</p>
                  <p className="text-sm opacity-90">{floorConfig.emoji} {floorConfig.name} - {selectedFloor}</p>
                </div>

                {/* Ïä§ÌîºÏª§ */}
                <div className="absolute bottom-4 left-8">
                  <div className="w-6 h-12 bg-gray-800 rounded border border-gray-600 flex flex-col justify-around p-1">
                    <div className="w-full h-2 bg-gray-700 rounded-full"></div>
                    <div className="w-full h-2 bg-gray-700 rounded-full"></div>
                    <div className="w-full h-2 bg-gray-700 rounded-full"></div>
                  </div>
                </div>
                <div className="absolute bottom-4 right-8">
                  <div className="w-6 h-12 bg-gray-800 rounded border border-gray-600 flex flex-col justify-around p-1">
                    <div className="w-full h-2 bg-gray-700 rounded-full"></div>
                    <div className="w-full h-2 bg-gray-700 rounded-full"></div>
                    <div className="w-full h-2 bg-gray-700 rounded-full"></div>
                  </div>
                </div>

                {/* Î™®ÎãàÌÑ∞ */}
                <div className="absolute bottom-2 left-1/3 w-8 h-4 bg-gray-700 border border-gray-500 transform -rotate-12"></div>
                <div className="absolute bottom-2 right-1/3 w-8 h-4 bg-gray-700 border border-gray-500 transform rotate-12"></div>
              </div>
            </div>
            {/* Ïä§ÌÖåÏù¥ÏßÄ Ï°∞Î™Ö Ìö®Í≥º */}
            <div className="absolute -bottom-6 left-1/2 transform -translate-x-1/2 w-3/4 h-12 bg-gradient-to-b from-yellow-200/50 to-transparent blur-xl"></div>
          </div>
        </div>

        {/* Ï§å Ïª®Ìä∏Î°§ ÏïàÎÇ¥ */}
        <div className="mb-4 text-center">
          <p className="text-xs text-gray-500">
            üí° <kbd className="px-2 py-1 bg-gray-200 rounded text-xs">Ctrl</kbd> + ÎßàÏö∞Ïä§ Ìú†Î°ú ÌôïÎåÄ/Ï∂ïÏÜå (ÌòÑÏû¨: {Math.round(zoomLevel * 100)}%)
          </p>
        </div>

        {/* Ï¢åÏÑù Í∑∏Î¶¨Îìú Ïª®ÌÖåÏù¥ÎÑà (Ïä§ÌÅ¨Î°§ ÏòÅÏó≠) */}
        <div 
          id="seat-container"
          className="max-h-[600px] overflow-auto p-6 bg-gradient-to-b from-gray-50 to-gray-100 rounded-2xl"
          style={{
            scrollbarWidth: 'thin',
            scrollbarColor: '#cbd5e1 #f1f5f9'
          }}
        >
          {/* Ï§å ÎûòÌçº (transform Ï†ÅÏö©) */}
          <div 
            className="inline-block min-w-full"
            style={{
              transform: `scale(${zoomLevel})`,
              transformOrigin: 'top center',
              transition: 'transform 0.2s ease-out'
            }}
          >
            {/* Ï¢åÏÑù Í∑∏Î¶¨Îìú */}
            <div 
              id="seat-grid"
              className="space-y-3 mx-auto"
              style={{
                width: 'fit-content'
              }}
            >
            {currentFloorSeats.map(({ row, count, config, isAisle }) => {
              // ÌÜµÎ°úÏù∏ Í≤ΩÏö∞ Îπà Ï§ÑÎßå ÌëúÏãú (ÌÖçÏä§Ìä∏ Ï†úÍ±∞)
              if (isAisle) {
                return (
                  <div key={`${config.prefix}-aisle-${row}`} className="h-4">
                    {/* Îπà ÌÜµÎ°ú Í≥µÍ∞Ñ */}
                  </div>
                )
              }

              // Ï¢åÏÑùÏùÑ 3x3 Í∑∏Î¶¨ÎìúÎ°ú 9Îì±Î∂Ñ (Ï†ïÏÇ¨Í∞ÅÌòï Î∞∞Ïπò + Ï¢åÏö∞ ÎåÄÏπ≠)
              const seatSize = 20 // Ï¢åÏÑù ÌÅ¨Í∏∞ (20px)
              const aisleGap = 24 // ÌÜµÎ°ú Í∞ÑÍ≤© (24px)
              
              // 9Îì±Î∂Ñ: Í∞Å Î∏îÎ°ùÎãπ Ï¢åÏÑù Ïàò (Ï¢åÏö∞ ÎåÄÏπ≠, ÎÇòÎ®∏ÏßÄÎäî Ï§ëÏïôÏóê)
              const seatsPerBlock = Math.floor(count / 9)
              const remainder = count % 9
              
              // ÎÇòÎ®∏ÏßÄÎ•º Ï§ëÏïô Î∏îÎ°ù(4Î≤à Ïù∏Îç±Ïä§)Ïóê Ï∂îÍ∞ÄÌïòÏó¨ Ï¢åÏö∞ ÎåÄÏπ≠ Ïú†ÏßÄ
              const blocks = [
                seatsPerBlock, seatsPerBlock, seatsPerBlock, // Ï¢åÏ∏° 3Î∏îÎ°ù
                seatsPerBlock, seatsPerBlock + remainder, seatsPerBlock, // Ï§ëÏïô 3Î∏îÎ°ù (ÎÇòÎ®∏ÏßÄÎ•º Ï§ëÏïôÏóê)
                seatsPerBlock, seatsPerBlock, seatsPerBlock // Ïö∞Ï∏° 3Î∏îÎ°ù (Ï¢åÏ∏°Í≥º ÎåÄÏπ≠)
              ]

              const renderSeatBlock = (start: number, length: number) => {
                return Array.from({ length }, (_, idx) => {
                  const seatId = `${config.prefix}-${row}-${start + idx + 1}`
                  const isSelected = selectedSeats.includes(seatId)
                  
                  const colorClasses = {
                    purple: isSelected ? 'bg-pink-500 ring-4 ring-pink-300 shadow-lg' : 'bg-purple-500 hover:bg-purple-600 hover:shadow-lg',
                    blue: isSelected ? 'bg-cyan-500 ring-4 ring-cyan-300 shadow-lg' : 'bg-blue-500 hover:bg-blue-600 hover:shadow-lg',
                    green: isSelected ? 'bg-lime-500 ring-4 ring-lime-300 shadow-lg' : 'bg-green-500 hover:bg-green-600 hover:shadow-lg',
                    orange: isSelected ? 'bg-yellow-500 ring-4 ring-yellow-300 shadow-lg' : 'bg-orange-500 hover:bg-orange-600 hover:shadow-lg',
                    red: isSelected ? 'bg-rose-500 ring-4 ring-rose-300 shadow-lg' : 'bg-red-500 hover:bg-red-600 hover:shadow-lg',
                    gray: isSelected ? 'bg-slate-500 ring-4 ring-slate-300 shadow-lg' : 'bg-gray-500 hover:bg-gray-600 hover:shadow-lg',
                    indigo: isSelected ? 'bg-violet-500 ring-4 ring-violet-300 shadow-lg' : 'bg-indigo-500 hover:bg-indigo-600 hover:shadow-lg',
                    pink: isSelected ? 'bg-fuchsia-500 ring-4 ring-fuchsia-300 shadow-lg' : 'bg-pink-500 hover:bg-pink-600 hover:shadow-lg',
                    teal: isSelected ? 'bg-emerald-500 ring-4 ring-emerald-300 shadow-lg' : 'bg-teal-500 hover:bg-teal-600 hover:shadow-lg',
                  }[config.color]

                  return (
                    <button
                      key={seatId}
                      onClick={() => handleSeatClick(seatId)}
                      className={`rounded-lg transition-all transform hover:scale-125 ${colorClasses}`}
                      style={{ width: `${seatSize}px`, height: `${seatSize}px` }}
                      title={seatId}
                    />
                  )
                })
              }

              let seatOffset = 0

              return (
                <div key={`${config.prefix}-${row}`} className="relative flex items-center justify-center gap-2">
                  {/* Ï¢åÏÑù Î∏îÎ°ùÎì§ (Ï§ëÏïô Ï†ïÎ†¨) */}
                  <div className="flex items-center gap-2">
                    {/* Ï¢åÏ∏° 3Î∏îÎ°ù */}
                    <div className="flex gap-1">
                      {renderSeatBlock(seatOffset, blocks[0])}
                    </div>
                    <div className="flex gap-1">
                      {renderSeatBlock(seatOffset += blocks[0], blocks[1])}
                    </div>
                    <div className="flex gap-1">
                      {renderSeatBlock(seatOffset += blocks[1], blocks[2])}
                    </div>

                    {/* ÏÑ∏Î°ú ÌÜµÎ°ú 1 (Ï¢åÏ∏°-Ï§ëÏïô ÏÇ¨Ïù¥) */}
                    <div style={{ width: `${aisleGap}px` }} className="h-5 flex items-center justify-center">
                      <div className="w-1 h-full bg-gray-400"></div>
                    </div>

                    {/* Ï§ëÏïô 3Î∏îÎ°ù */}
                    <div className="flex gap-1">
                      {renderSeatBlock(seatOffset += blocks[2], blocks[3])}
                    </div>
                    <div className="flex gap-1">
                      {renderSeatBlock(seatOffset += blocks[3], blocks[4])}
                    </div>
                    <div className="flex gap-1">
                      {renderSeatBlock(seatOffset += blocks[4], blocks[5])}
                    </div>

                    {/* ÏÑ∏Î°ú ÌÜµÎ°ú 2 (Ï§ëÏïô-Ïö∞Ï∏° ÏÇ¨Ïù¥) */}
                    <div style={{ width: `${aisleGap}px` }} className="h-5 flex items-center justify-center">
                      <div className="w-1 h-full bg-gray-400"></div>
                    </div>

                    {/* Ïö∞Ï∏° 3Î∏îÎ°ù */}
                    <div className="flex gap-1">
                      {renderSeatBlock(seatOffset += blocks[5], blocks[6])}
                    </div>
                    <div className="flex gap-1">
                      {renderSeatBlock(seatOffset += blocks[6], blocks[7])}
                    </div>
                    <div className="flex gap-1">
                      {renderSeatBlock(seatOffset += blocks[7], blocks[8])}
                    </div>
                  </div>

                  {/* Ìñâ Î≤àÌò∏Î•º absoluteÎ°ú Ïò§Î•∏Ï™ΩÏóê Î∞∞Ïπò */}
                  <span className="absolute -right-16 text-sm text-gray-600 font-bold">
                    {row}Ìñâ
                  </span>
                </div>
              )
            })}
            </div>
          </div>
        </div>

        {/* ÏÑ†ÌÉùÎêú Ï¢åÏÑù Î™©Î°ù */}
        {selectedSeats.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="mt-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl border border-blue-200"
          >
            <p className="text-sm font-bold text-gray-900 mb-3">
              ‚ú® ÏÑ†ÌÉùÎêú Ï¢åÏÑù ({selectedSeats.length}ÏÑù)
            </p>
            <div className="flex flex-wrap gap-2">
              {selectedSeats.map(seat => (
                <div
                  key={seat}
                  className="group relative px-3 py-1.5 bg-gradient-to-r from-primary-500 to-primary-600 text-white text-xs font-medium rounded-lg shadow-md hover:shadow-lg transition-all"
                >
                  <span>{seat}</span>
                  {/* X Î≤ÑÌäº (Ìò∏Î≤Ñ Ïãú ÌëúÏãú) */}
                  <button
                    onClick={() => {
                      setSelectedSeats(prev => prev.filter(s => s !== seat))
                    }}
                    className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 hover:bg-red-600 text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity shadow-md"
                    title="ÏÑ†ÌÉù Ï∑®ÏÜå"
                  >
                    <span className="text-xs leading-none">√ó</span>
                  </button>
                </div>
              ))}
            </div>
          </motion.div>
        )}

        {/* ÏòàÏïΩ Î≤ÑÌäº */}
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={handleReserve}
          disabled={selectedSeats.length !== quantity || createReservationMutation.isPending}
          className="btn btn-primary w-full text-lg py-5 mt-6 shadow-xl"
        >
          {createReservationMutation.isPending ? (
            <div className="flex items-center justify-center space-x-2">
              <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
              <span>ÏòàÏïΩ Ï≤òÎ¶¨ Ï§ë...</span>
            </div>
          ) : (
            `üé´ ÏòàÏïΩÌïòÍ∏∞ (${selectedSeats.length}/${quantity}ÏÑù)`
          )}
        </motion.button>
      </motion.div>
    </div>
  )
}

export default Reserve
